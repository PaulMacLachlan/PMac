1. fire up venv: source *djangoEnv*/bin/activate
2. create project using django: $ django-admin startproject *PROJECTNAME*
3. 
(djangoEnv) paulmaclachlan@MBA django (master)$ cd PROJECTNAME/
(djangoEnv) paulmaclachlan@MBA PROJECTNAME (master)$ mkdir apps
(djangoEnv) paulmaclachlan@MBA PROJECTNAME (master)$ cd apps
(djangoEnv) paulmaclachlan@MBA apps (master)$ touch __init__.py
(djangoEnv) paulmaclachlan@MBA apps (master)*$ python ../manage.py startapp APP_NAME
(djangoEnv) paulmaclachlan@MBA apps (master)*$ cd ../
(djangoEnv) paulmaclachlan@MBA PROJECTNAME (master)*$ atom .

4. AFTER ALL FILES ARE IN PLACE: (djangoEnv) paulmaclachlan@MBA PROJECTNAME (master)*$ python manage.py runserver



############################

LIST 2
1. Creating the project and app

(djangoEnv) paulmaclachlan@MBA PMac (master)$ cd Python2
(djangoEnv) paulmaclachlan@MBA Python2 (master)$ cd django/
(djangoEnv) paulmaclachlan@MBA django (master)$ django-admin startproject main2
(djangoEnv) paulmaclachlan@MBA django (master)*$ cd main2
(djangoEnv) paulmaclachlan@MBA main2 (master)*$ mkdir apps
(djangoEnv) paulmaclachlan@MBA main2 (master)*$ cd apps
(djangoEnv) paulmaclachlan@MBA apps (master)*$ touch __init__.py
(djangoEnv) paulmaclachlan@MBA apps (master)*$ python ../manage.py startapp second_app
(djangoEnv) paulmaclachlan@MBA apps (master)*$ cd ../
(djangoEnv) paulmaclachlan@MBA main2 (master)*$ ls
apps            main2           manage.py
(djangoEnv) paulmaclachlan@MBA main2 (master)*$ atom .
(djangoEnv) paulmaclachlan@MBA main2 (master)*$ 

2. 
NEXT, in `main2` dir, in `settings.py` add `second_app` to INSTALLED_APPS

3. 
in `main2/urls.py` in `urlpatterns`, create a pattern for "localhost" by removing the `/admin` pattern and adding in one for `url(r'^', include('apps.second_app.urls')),`

4.
within the `second_app` dir, create `urls.py` and paste in the data from `main2/urls.py`, deleting the import of `include` part, adding `from . import views`, and adding a `$` to the regex, as well as `views.index`.

5. 
In the same dir, in `views.py`, we define our `index`route, that renders our index.html, as well as, if needed, our context dict, a keyword argument.

6.
Within `second_app` (app folder, not project folder) create a `templates` folder, as well as another `second_app` dir. `/templates` will house all of our html files.

7.
Within `index.html` we can use `{{}}` to print the values of the `context` object we created earlier, like this: `{{email}} and {{name}}` within the body tags.

8. 
we can start the server (from within the `main2` dir, where `manage.py` lives by running $`python manage.py runserver`. In our index.html, this now displays "Hello World!" as well as the 2 variables in the `context` object! :)

9. 
TO RENDER OTHE RPAGES, SPECIFICALLY WITH `<id>`'s in them:
	`url(r'^users/(?P<id>\d+)$', views.show)` or similar needs to be added to the `urlpatterns` list in `second_app/urls.py`
10.
This requires a corresponding route in `views.py` for `show`:

	def show(request, id):
    context = {
        "id": id
    }
    print context
    return render(request, "second_app/show.html", context)
    
Note: this is taking in a keyword argument of `id` thats passed into the `context` object and stored as `"id"`

11.
Next, within the top level `static_app` directory, we'll create a `static` folder, and within that folder, another `second_app` folder, with corresponding css, images and js folders, depending on the type of files we want to add.

12. 
We have to allow for these files to be called out from out `index.html` (in this case) so script references must be made to them there:
in Django, we do this in the head tags, like this:
	`{% load staticfiles %}`
    	    `<script src="{% static 'second_app/js/main.js' %}" charset="utf-8"></script>`
    	    
Note how within the script src, django knows to dig into the `static` directory, and from there we call out the file that should be referenced, our `main.js` in this instance.

13.
ADDING THE DATABASE (db) (using Sqlite3):

In `models.py`:

	class People(models.Model):
    first_name = models.CharField(max_length=38)
    last_name = models.CharField(max_length=38)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
######### and in the server, to make migrations:

(djangoEnv) paulmaclachlan@MBA main2 (master)*$ python manage.pyakemigrations
Migrations for 'second_app':
  apps/second_app/migrations/0001_initial.py:
    - Create model People
(djangoEnv) paulmaclachlan@MBA main2 (master)*$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, second_app, sessions
Running migrations:
  Applying second_app.0001_initial... OK
(djangoEnv) paulmaclachlan@MBA main2 (master)*$ 

